<?xml version="1.0"?>
<launch>
  <!-- arguments -->
  <arg name="nodelet_manager" default="velodyne_nodelet_manager" />
  <arg name="enable_floor_detection" default="false" />
  <arg name="enable_gps" default="false" />
  <arg name="enable_imu_acc" default="false" />
  <arg name="enable_imu_ori" default="false" />

<!--   <arg name="points_topic" default="/hugin_raf_1/radar_data" /> -->
  <arg name="points_topic" default="/hugin_raf_1/radar_data" />
  <arg name="map_frame_id" default="map" />
  <arg name="lidar_odom_frame_id" default="radar_odom" />

  <!-- optional arguments -->
  <arg name="enable_robot_odometry_init_guess" default="true" />
  <arg name="robot_odom_frame_id" default="odom" />

  <arg name="mode" default="ros"/>
  <arg name="do_plot" default="False"/>

  <arg name="config" default="params_demo_dataset"/>
  <arg name="calibration" default="$(find radar_ego_velocity_estimator)/../demo_datasets/calib_rio"/>

  <arg name="topic_twist" default="/radar_ego_velocity_estimation_node/twist"/>
  <arg name="run_without_trigger" default="True"/>
  <arg name="use_odr" default="False"/>

  <node name="radar_ego_velocity_estimator" pkg="radar_ego_velocity_estimator" type="radar_ego_velocity_estimation_$(arg mode)_node"
          output="screen" launch-prefix="">     
        <rosparam file="$(find radar_ego_velocity_estimator)/config/$(arg config).yaml" command="load"/>
        <rosparam file="$(arg calibration).yaml" command="load" ns=""/>
        <param name="run_without_trigger" value="$(arg run_without_trigger)" type="bool"/>
        <param name="use_odr" value="$(arg use_odr)" type="bool"/>
        <param name="topic_twist" value="$(arg topic_twist)" type="string"/>
        <param name="topic_radar_scan" value="/hugin_raf_1/radar_data" type="string"/>
        <param name="topic_radar_trigger" value="/sensor_platform/radar/trigger" type="string"/>
  </node>

  <node name="rio_odom_fuser" pkg="rio_odom" type="radar_imu_fusion" output="screen">
    	<remap from="input_imu" to="/imu/data" />
    	<remap from="input_twist" to="/radar_ego_velocity_estimation_node/twist" />
    	<rosparam param="imu_alignment_rpy">[0.0, 0.0, 1.5708]</rosparam>
    	<!--<rosparam param="radar_alignment_rpy">[-3.010, -0.000, 1.590]</rosparam>  -->
    	<rosparam param="radar_alignment_rpy">[3.108, 0.000, 1.630]</rosparam>   <!-- Andres straight -->
    	
    	<param name="publish_translation" value="True"/>
    	<param name="publish_identity_attitude" value="False"/>
      	<remap from="/rio_odom_fuser/odom" to="/odom" />
        <param name="odom_frame" value="odom" type="string"/>
        <param name="base_frame" value="base_link" type="string"/>
<!--         <param name="odom_frame" value="odom" type="string"/> -->
<!--         <param name="base_frame" value="base_link" type="string"/> -->
  </node>

  <!-- in case you use velodyne_driver, comment out the following line -->
  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen"/>

  <!-- prefiltering_nodelet -->
  <node pkg="nodelet" type="nodelet" name="prefiltering_nodelet" args="load hdl_graph_slam/PrefilteringNodelet $(arg nodelet_manager)">
    <remap from="/velodyne_points" to="$(arg points_topic)" />
    <!-- in case base_link_frame is blank, mapping will be performed in the lidar frame -->
    <param name="base_link_frame" value="base_link" />
    <!-- distance filter -->
    <param name="use_distance_filter" value="true" />
    <param name="distance_near_thresh" value="3.1" />
    <param name="distance_far_thresh" value="100.0" />
    <!-- NONE, VOXELGRID, or APPROX_VOXELGRID -->
    <param name="downsample_method" value="VOXELGRID" />
    <param name="downsample_resolution" value="0.1" />
    <!-- NONE, RADIUS, or STATISTICAL -->
    <param name="outlier_removal_method" value="RADIUS" />
    <param name="statistical_mean_k" value="30" />
    <param name="statistical_stddev" value="1.2" />
    <param name="radius_radius" value="0.5" />
    <param name="radius_min_neighbors" value="2" />

    <!-- Box filter for input -->
    <rosparam param="box_filter_max_corner">[ 2.0, 4.0,  0.0]</rosparam>
    <rosparam param="box_filter_min_corner">[-2.0, 1.0, -2.0]</rosparam>
    <param name="use_box_filter" value="True"/>

    <!-- Power filter for input -->
    <param name="use_power_filter" value="True"/>
    <param name="power_filter_field_name" value="power"/>
    <param name="power_filter_lower_threshold" value="70.0"/>
    <param name="power_filter_upper_threshold" value="300.0"/>


  </node>

  <!-- scan_matching_odometry_nodelet -->
<!--   <node pkg="nodelet" type="nodelet" name="scan_matching_odometry_nodelet" args="load hdl_graph_slam/ScanMatchingOdometryNodelet $(arg nodelet_manager)"> -->
<!--     <param name="points_topic" value="$(arg points_topic)" /> -->
<!--     <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" /> -->
<!--     <param name="robot_odom_frame_id" value="$(arg robot_odom_frame_id)" /> -->
<!--     <param name="keyframe_delta_trans" value="1.0" /> -->
<!--     <param name="keyframe_delta_angle" value="1.0" /> -->
<!--     <param name="keyframe_delta_time" value="10000.0" /> -->
<!--     <param name="transform_thresholding" value="false" /> -->
<!--     <param name="enable_robot_odometry_init_guess" value="$(arg enable_robot_odometry_init_guess)" /> -->
<!--     <param name="max_acceptable_trans" value="1.0" /> -->
<!--     <param name="max_acceptable_angle" value="1.0" /> -->
<!--     <param name="downsample_method" value="NONE" /> -->
<!--     <param name="downsample_resolution" value="0.1" /> -->
<!--     ICP, GICP, NDT, GICP_OMP, NDT_OMP, FAST_GICP(recommended), or FAST_VGICP -->
<!--     <param name="registration_method" value="FAST_GICP" /> -->
<!--     <param name="reg_num_threads" value="0" /> -->
<!--     <param name="reg_transformation_epsilon" value="0.1"/> -->
<!--     <param name="reg_maximum_iterations" value="64"/> -->
<!--     <param name="reg_max_correspondence_distance" value="2.0"/> -->
<!--     <param name="reg_max_optimizer_iterations" value="20"/> -->
<!--     <param name="reg_use_reciprocal_correspondences" value="false"/> -->
<!--     <param name="reg_correspondence_randomness" value="20"/> -->
<!--     <param name="reg_resolution" value="1.0" /> -->
<!--     <param name="reg_nn_search_method" value="DIRECT7" /> -->
<!--   </node> -->

  <!-- floor_detection_nodelet -->
  <node pkg="nodelet" type="nodelet" name="floor_detection_nodelet" args="load hdl_graph_slam/FloorDetectionNodelet $(arg nodelet_manager)" if="$(arg enable_floor_detection)">
    <param name="points_topic" value="$(arg points_topic)" />
    <param name="tilt_deg" value="0.0" />
    <param name="sensor_height" value="2.0" />
    <param name="height_clip_range" value="1.0" />
    <param name="floor_pts_thresh" value="512" />
    <param name="use_normal_filtering" value="true" />
    <param name="normal_filter_thresh" value="20.0" />
  </node>

  <!-- hdl_graph_slam_nodelet -->
  <node pkg="nodelet" type="nodelet" name="hdl_graph_slam_nodelet" args="load hdl_graph_slam/HdlGraphSlamNodelet $(arg nodelet_manager)">
    <param name="points_topic" value="$(arg points_topic)" />
<!--     frame settings -->
    <param name="map_frame_id" value="$(arg map_frame_id)" />
    <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
<!--     optimization params -->
<!--     typical solvers: gn_var, gn_fix6_3, gn_var_cholmod, lm_var, lm_fix6_3, lm_var_cholmod, ... -->
    <param name="g2o_solver_type" value="lm_var_cholmod" />
    <param name="g2o_solver_num_iterations" value="512" />
<!--     constraint switches -->
    <param name="enable_gps" value="$(arg enable_gps)" />
    <param name="enable_imu_acceleration" value="$(arg enable_imu_acc)" />
    <param name="enable_imu_orientation" value="$(arg enable_imu_ori)" />
<!--     keyframe registration params -->
    <param name="max_keyframes_per_update" value="10" />
    <param name="keyframe_delta_trans" value="2.0" />
    <param name="keyframe_delta_angle" value="2.0" />
<!--     fix first node for optimization stability -->
    <param name="fix_first_node" value="true"/>
    <param name="fix_first_node_stddev" value="10 10 10 1 1 1"/>
    <param name="fix_first_node_adaptive" value="true"/>
<!--     loop closure params -->
    <param name="distance_thresh" value="15.0" />
    <param name="accum_distance_thresh" value="25.0" />
    <param name="min_edge_interval" value="15.0" />
    <param name="fitness_score_thresh" value="2.5" />
<!--     scan matching params -->
    <param name="registration_method" value="FAST_GICP" />
    <param name="reg_num_threads" value="0" />
    <param name="reg_transformation_epsilon" value="0.1"/>
    <param name="reg_maximum_iterations" value="64"/>
    <param name="reg_max_correspondence_distance" value="2.0"/>
    <param name="reg_max_optimizer_iterations" value="20"/>
    <param name="reg_use_reciprocal_correspondences" value="false"/>
    <param name="reg_correspondence_randomness" value="20"/>
    <param name="reg_resolution" value="1.0" />
    <param name="reg_nn_search_method" value="DIRECT7" />
<!--     edge params -->
<!--     GPS -->
    <param name="gps_edge_robust_kernel" value="NONE" />
    <param name="gps_edge_robust_kernel_size" value="1.0" />
    <param name="gps_edge_stddev_xy" value="20.0" />
    <param name="gps_edge_stddev_z" value="5.0" />
<!--     IMU orientation -->
    <param name="imu_orientation_edge_robust_kernel" value="NONE" />
    <param name="imu_orientation_edge_stddev" value="1.0" />
<!--     IMU acceleration (gravity vector) -->
    <param name="imu_acceleration_edge_robust_kernel" value="NONE" />
    <param name="imu_acceleration_edge_stddev" value="1.0" />
<!--     ground plane -->
    <param name="floor_edge_robust_kernel" value="NONE" />
    <param name="floor_edge_stddev" value="10.0" />
<!--     scan matching -->
<!--     robust kernels: NONE, Cauchy, DCS, Fair, GemanMcClure, Huber, PseudoHuber, Saturated, Tukey, Welsch -->
    <param name="odometry_edge_robust_kernel" value="NONE" />
    <param name="odometry_edge_robust_kernel_size" value="1.0" />
    <param name="loop_closure_edge_robust_kernel" value="Huber" />
    <param name="loop_closure_edge_robust_kernel_size" value="1.0" />
    <param name="use_const_inf_matrix" value="false" />
    <param name="const_stddev_x" value="0.5" />
    <param name="const_stddev_q" value="0.1" />
    <param name="var_gain_a" value="20.0" />
    <param name="min_stddev_x" value="0.1" />
    <param name="max_stddev_x" value="5.0" />
    <param name="min_stddev_q" value="0.05" />
    <param name="max_stddev_q" value="0.2" />
<!--     update params -->
    <param name="graph_update_interval" value="3.0" />
    <param name="map_cloud_update_interval" value="10.0" />
    <param name="map_cloud_resolution" value="0.05" />
  </node>

  <node pkg="hdl_graph_slam" type="map2odom_publisher.py" name="map2odom_publisher" />
  <node pkg="tf" type="static_transform_publisher" name="tf_map_to_odom" args="0.0 0.0 0.0 0.0 0.0 0.0 map odom 100"/>
</launch>
